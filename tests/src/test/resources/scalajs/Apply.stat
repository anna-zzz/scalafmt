80 columns                                                                     |
<<< config style #158
function(
  a,
  b
)
>>>
function(
    a,
    b
)
<<< penalty #248
     def iterator(): Iterator[A] =
      toIterator(it
            .asInstanceOf[IteratorMethodAccess]
            .bracketCall[JSIterator[A]](iteratorSymbol)())
>>>
def iterator(): Iterator[A] =
  toIterator(
      it.asInstanceOf[IteratorMethodAccess]
        .bracketCall[JSIterator[A]](iteratorSymbol)())
<<< penalty 2 #248
{
  apply(
  body= js.undefined,
      dir= js.undefined,
            it.asInstanceOf[IteratorMethodAccess]
        .bracketCall[JSIterator[A]](iteratorSymbol)(),
      icon= js.undefined,
      lang= js.undefined,
      vibrate= js.undefined )
        }
>>>
{
  apply(body = js.undefined, dir = js.undefined,
      it.asInstanceOf[IteratorMethodAccess]
        .bracketCall[JSIterator[A]](iteratorSymbol)(),
      icon = js.undefined, lang = js.undefined, vibrate = js.undefined)
}
<<< many args #248
apply( body= js.undefined,
      dir= js.undefined,
      icon= js.undefined,
      lang= js.undefined,
      noscreen= js.undefined,
      renotify= js.undefined,
      silent= js.undefined,
      sound= js.undefined,
      sticky= js.undefined,
      tag= js.undefined,
      onclick= js.undefined,
      onerror= js.undefined,
      vibrate= js.undefined
        )
>>>
apply(body = js.undefined, dir = js.undefined, icon = js.undefined,
    lang = js.undefined, noscreen = js.undefined, renotify = js.undefined,
    silent = js.undefined, sound = js.undefined, sticky = js.undefined,
    tag = js.undefined, onclick = js.undefined, onerror = js.undefined,
    vibrate = js.undefined)
<<< unindent in braces #258
 reject(th match {
  case JavaScriptException(e) => e
})
>>>
reject(th match {
  case JavaScriptException(e) => e
})
<<< blocks are special #260
p.`then`[Unit](
          { (v: A) =>
            p2.success(v)
            (): Unit | Thenable[Unit]
          },
          defined { (e: scala.Any) =>
            p2.failure(e match {
              case th: Throwable => th
              case _             => JavaScriptException(e)
            })
            (): Unit | Thenable[Unit]
          })
>>>
p.`then`[Unit](
    { (v: A) =>
      p2.success(v)
      (): Unit | Thenable[Unit]
    },
    defined { (e: scala.Any) =>
      p2.failure(e match {
        case th: Throwable => th
        case _             => JavaScriptException(e)
      })
      (): Unit | Thenable[Unit]
    })
