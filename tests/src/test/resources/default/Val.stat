80 columns                                                                     |
<<< Long line
val newIndents: Vector[Indent[Num]]
      = nonExpiredIndents ++ split.indents.map(_ .withNum(column, indentation))
>>>
val newIndents: Vector[Indent[Num]] =
  nonExpiredIndents ++ split.indents.map(_.withNum(column, indentation))
<<< Don't break
var inside =
    false
>>>
var inside = false
<<< underscore assignment
var inside: Int   = _
>>>
var inside: Int = _
<<< && gets space
val attachedComment = !rightIsOnNewLine&& isInlineComment(right)
>>>
val attachedComment = !rightIsOnNewLine && isInlineComment(right)
<<< break in higher nesting
    val longHash: Long =
      (token.privateTag.toLong << (62 - 8)) |
        (token.start.toLong << (62 - (8 + 28))) | token.end
>>>
val longHash: Long =
  (token.privateTag.toLong << (62 - 8)) |
  (token.start.toLong << (62 - (8 + 28))) | token.end
<<< backticks get no space #95
  val `type`: String = js.native
>>>
val `type`: String = js.native
<<< Insane type
{
  implicit val enumeratorTMonadTrans: MonadTrans[λ[(β[_], α) => EnumeratorT[
              α, β]]] = new MonadTrans[λ[(β[_], α) => EnumeratorT[α, β]]] {
    def liftM[G[_]: Monad, E](ga: G[E]): EnumeratorT[E, G] =
      new EnumeratorT[E, G] {
        def apply[A] =
          (s: StepT[E, G, A]) =>
            iterateeT(
                Monad[G].bind(ga) { e =>
              s.mapCont(k => k(elInput(e))).value
            })
      }
      }
      }
>>>
{
  implicit val enumeratorTMonadTrans: MonadTrans[λ[(β[_],
                                                    α) => EnumeratorT[α, β]]] =
    new MonadTrans[λ[(β[_], α) => EnumeratorT[α, β]]] {
      def liftM[G[_]: Monad, E](ga: G[E]): EnumeratorT[E, G] =
        new EnumeratorT[E, G] {
          def apply[A] =
            (s: StepT[E, G, A]) =>
              iterateeT(Monad[G].bind(ga) { e =>
                s.mapCont(k => k(elInput(e))).value
              })
        }
    }
}
<<< SKIP unfortunate = space
            val nextComma: Option[FormatToken] = next(
                leftTok2tok(nextArg.tokens.last)) match {
              case t @ FormatToken(left: `,`, _, _)
                  if owners(left) == leftOwner =>
                Some(t)
              case _ => None
            }
>>>
x
